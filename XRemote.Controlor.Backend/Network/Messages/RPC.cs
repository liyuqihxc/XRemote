// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: RPC.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace RPC {

  /// <summary>Holder for reflection information generated from RPC.proto</summary>
  public static partial class RPCReflection {

    #region Descriptor
    /// <summary>File descriptor for RPC.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RPCReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CglSUEMucHJvdG8SA1JQQyJIChNDcmVhdGVJbnN0YW5jZVBhcmFtEg8KB1Zl",
            "cnNpb24YASABKAcSEgoKQWN0aXZpdHlJRBgCIAEoBxIMCgRHdWlkGAMgASgJ",
            "It4BCgxWYXJpYW50UGFyYW0SEQoHRml4ZWQzMhgBIAEoB0gAEhIKCFNGaXhl",
            "ZDMyGAIgASgPSAASEQoHRml4ZWQ2NBgDIAEoBkgAEhIKCFNGaXhlZDY0GAQg",
            "ASgQSAASDgoEQm9vbBgFIAEoCEgAEg8KBUZsb2F0GAYgASgCSAASEAoGRG91",
            "YmxlGAcgASgBSAASEAoGU3RyaW5nGAggASgJSAASEQoHRGVjaW1hbBgJIAEo",
            "CUgAEg8KBUJ5dGVzGAogASgMSAASDgoER3VpZBgLIAEoDEgAQgcKBVZhbHVl",
            "IoUBCglScGNJbnZva2USEAoIT2JqZWN0SUQYASABKA8SEwoLSW50ZXJmYWNl",
            "SUQYAiABKAcSDgoGQ2FsbElEGAMgASgPEg4KBkRpc3BJRBgEIAEoBRIOCgZ3",
            "RmxhZ3MYBSABKAUSIQoGUGFyYW1zGAYgAygLMhEuUlBDLlZhcmlhbnRQYXJh",
            "bSLMAQoJUnBjUmV0dXJuEg4KBkNhbGxJRBgBIAEoDxIPCgdIUmVzdWx0GAIg",
            "ASgPEikKDlJlZl9PdXRfUGFyYW1zGAMgAygLMhEuUlBDLlZhcmlhbnRQYXJh",
            "bRIvCglFeGNlcHRpb24YBCABKAsyHC5SUEMuUnBjUmV0dXJuLkV4Y2VwdGlv",
            "bkluZm8aQgoNRXhjZXB0aW9uSW5mbxITCgtEZXNjcmlwdGlvbhgBIAEoCRIN",
            "CgVzY29kZRgCIAEoBRINCgV3Q29kZRgDIAEoBTIUChJSZW1vdGVDbGFzc0Zh",
            "Y3RvcnlCAkgCYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::RPC.CreateInstanceParam), global::RPC.CreateInstanceParam.Parser, new[]{ "Version", "ActivityID", "Guid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RPC.VariantParam), global::RPC.VariantParam.Parser, new[]{ "Fixed32", "SFixed32", "Fixed64", "SFixed64", "Bool", "Float", "Double", "String", "Decimal", "Bytes", "Guid" }, new[]{ "Value" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RPC.RpcInvoke), global::RPC.RpcInvoke.Parser, new[]{ "ObjectID", "InterfaceID", "CallID", "DispID", "WFlags", "Params" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RPC.RpcReturn), global::RPC.RpcReturn.Parser, new[]{ "CallID", "HResult", "RefOutParams", "Exception" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::RPC.RpcReturn.Types.ExceptionInfo), global::RPC.RpcReturn.Types.ExceptionInfo.Parser, new[]{ "Description", "Scode", "WCode" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CreateInstanceParam : pb::IMessage<CreateInstanceParam> {
    private static readonly pb::MessageParser<CreateInstanceParam> _parser = new pb::MessageParser<CreateInstanceParam>(() => new CreateInstanceParam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateInstanceParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RPC.RPCReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateInstanceParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateInstanceParam(CreateInstanceParam other) : this() {
      version_ = other.version_;
      activityID_ = other.activityID_;
      guid_ = other.guid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateInstanceParam Clone() {
      return new CreateInstanceParam(this);
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 1;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "ActivityID" field.</summary>
    public const int ActivityIDFieldNumber = 2;
    private uint activityID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityID {
      get { return activityID_; }
      set {
        activityID_ = value;
      }
    }

    /// <summary>Field number for the "Guid" field.</summary>
    public const int GuidFieldNumber = 3;
    private string guid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Guid {
      get { return guid_; }
      set {
        guid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateInstanceParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateInstanceParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (ActivityID != other.ActivityID) return false;
      if (Guid != other.Guid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version != 0) hash ^= Version.GetHashCode();
      if (ActivityID != 0) hash ^= ActivityID.GetHashCode();
      if (Guid.Length != 0) hash ^= Guid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Version);
      }
      if (ActivityID != 0) {
        output.WriteRawTag(21);
        output.WriteFixed32(ActivityID);
      }
      if (Guid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Guid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version != 0) {
        size += 1 + 4;
      }
      if (ActivityID != 0) {
        size += 1 + 4;
      }
      if (Guid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Guid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateInstanceParam other) {
      if (other == null) {
        return;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.ActivityID != 0) {
        ActivityID = other.ActivityID;
      }
      if (other.Guid.Length != 0) {
        Guid = other.Guid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Version = input.ReadFixed32();
            break;
          }
          case 21: {
            ActivityID = input.ReadFixed32();
            break;
          }
          case 26: {
            Guid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VariantParam : pb::IMessage<VariantParam> {
    private static readonly pb::MessageParser<VariantParam> _parser = new pb::MessageParser<VariantParam>(() => new VariantParam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VariantParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RPC.RPCReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VariantParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VariantParam(VariantParam other) : this() {
      switch (other.ValueCase) {
        case ValueOneofCase.Fixed32:
          Fixed32 = other.Fixed32;
          break;
        case ValueOneofCase.SFixed32:
          SFixed32 = other.SFixed32;
          break;
        case ValueOneofCase.Fixed64:
          Fixed64 = other.Fixed64;
          break;
        case ValueOneofCase.SFixed64:
          SFixed64 = other.SFixed64;
          break;
        case ValueOneofCase.Bool:
          Bool = other.Bool;
          break;
        case ValueOneofCase.Float:
          Float = other.Float;
          break;
        case ValueOneofCase.Double:
          Double = other.Double;
          break;
        case ValueOneofCase.String:
          String = other.String;
          break;
        case ValueOneofCase.Decimal:
          Decimal = other.Decimal;
          break;
        case ValueOneofCase.Bytes:
          Bytes = other.Bytes;
          break;
        case ValueOneofCase.Guid:
          Guid = other.Guid;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VariantParam Clone() {
      return new VariantParam(this);
    }

    /// <summary>Field number for the "Fixed32" field.</summary>
    public const int Fixed32FieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Fixed32 {
      get { return valueCase_ == ValueOneofCase.Fixed32 ? (uint) value_ : 0; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.Fixed32;
      }
    }

    /// <summary>Field number for the "SFixed32" field.</summary>
    public const int SFixed32FieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SFixed32 {
      get { return valueCase_ == ValueOneofCase.SFixed32 ? (int) value_ : 0; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.SFixed32;
      }
    }

    /// <summary>Field number for the "Fixed64" field.</summary>
    public const int Fixed64FieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Fixed64 {
      get { return valueCase_ == ValueOneofCase.Fixed64 ? (ulong) value_ : 0UL; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.Fixed64;
      }
    }

    /// <summary>Field number for the "SFixed64" field.</summary>
    public const int SFixed64FieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SFixed64 {
      get { return valueCase_ == ValueOneofCase.SFixed64 ? (long) value_ : 0L; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.SFixed64;
      }
    }

    /// <summary>Field number for the "Bool" field.</summary>
    public const int BoolFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Bool {
      get { return valueCase_ == ValueOneofCase.Bool ? (bool) value_ : false; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.Bool;
      }
    }

    /// <summary>Field number for the "Float" field.</summary>
    public const int FloatFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Float {
      get { return valueCase_ == ValueOneofCase.Float ? (float) value_ : 0F; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.Float;
      }
    }

    /// <summary>Field number for the "Double" field.</summary>
    public const int DoubleFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Double {
      get { return valueCase_ == ValueOneofCase.Double ? (double) value_ : 0D; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.Double;
      }
    }

    /// <summary>Field number for the "String" field.</summary>
    public const int StringFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string String {
      get { return valueCase_ == ValueOneofCase.String ? (string) value_ : ""; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valueCase_ = ValueOneofCase.String;
      }
    }

    /// <summary>Field number for the "Decimal" field.</summary>
    public const int DecimalFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Decimal {
      get { return valueCase_ == ValueOneofCase.Decimal ? (string) value_ : ""; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valueCase_ = ValueOneofCase.Decimal;
      }
    }

    /// <summary>Field number for the "Bytes" field.</summary>
    public const int BytesFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Bytes {
      get { return valueCase_ == ValueOneofCase.Bytes ? (pb::ByteString) value_ : pb::ByteString.Empty; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valueCase_ = ValueOneofCase.Bytes;
      }
    }

    /// <summary>Field number for the "Guid" field.</summary>
    public const int GuidFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Guid {
      get { return valueCase_ == ValueOneofCase.Guid ? (pb::ByteString) value_ : pb::ByteString.Empty; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valueCase_ = ValueOneofCase.Guid;
      }
    }

    private object value_;
    /// <summary>Enum of possible cases for the "Value" oneof.</summary>
    public enum ValueOneofCase {
      None = 0,
      Fixed32 = 1,
      SFixed32 = 2,
      Fixed64 = 3,
      SFixed64 = 4,
      Bool = 5,
      Float = 6,
      Double = 7,
      String = 8,
      Decimal = 9,
      Bytes = 10,
      Guid = 11,
    }
    private ValueOneofCase valueCase_ = ValueOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueOneofCase ValueCase {
      get { return valueCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      valueCase_ = ValueOneofCase.None;
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VariantParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VariantParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fixed32 != other.Fixed32) return false;
      if (SFixed32 != other.SFixed32) return false;
      if (Fixed64 != other.Fixed64) return false;
      if (SFixed64 != other.SFixed64) return false;
      if (Bool != other.Bool) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Float, other.Float)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Double, other.Double)) return false;
      if (String != other.String) return false;
      if (Decimal != other.Decimal) return false;
      if (Bytes != other.Bytes) return false;
      if (Guid != other.Guid) return false;
      if (ValueCase != other.ValueCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (valueCase_ == ValueOneofCase.Fixed32) hash ^= Fixed32.GetHashCode();
      if (valueCase_ == ValueOneofCase.SFixed32) hash ^= SFixed32.GetHashCode();
      if (valueCase_ == ValueOneofCase.Fixed64) hash ^= Fixed64.GetHashCode();
      if (valueCase_ == ValueOneofCase.SFixed64) hash ^= SFixed64.GetHashCode();
      if (valueCase_ == ValueOneofCase.Bool) hash ^= Bool.GetHashCode();
      if (valueCase_ == ValueOneofCase.Float) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Float);
      if (valueCase_ == ValueOneofCase.Double) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Double);
      if (valueCase_ == ValueOneofCase.String) hash ^= String.GetHashCode();
      if (valueCase_ == ValueOneofCase.Decimal) hash ^= Decimal.GetHashCode();
      if (valueCase_ == ValueOneofCase.Bytes) hash ^= Bytes.GetHashCode();
      if (valueCase_ == ValueOneofCase.Guid) hash ^= Guid.GetHashCode();
      hash ^= (int) valueCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (valueCase_ == ValueOneofCase.Fixed32) {
        output.WriteRawTag(13);
        output.WriteFixed32(Fixed32);
      }
      if (valueCase_ == ValueOneofCase.SFixed32) {
        output.WriteRawTag(21);
        output.WriteSFixed32(SFixed32);
      }
      if (valueCase_ == ValueOneofCase.Fixed64) {
        output.WriteRawTag(25);
        output.WriteFixed64(Fixed64);
      }
      if (valueCase_ == ValueOneofCase.SFixed64) {
        output.WriteRawTag(33);
        output.WriteSFixed64(SFixed64);
      }
      if (valueCase_ == ValueOneofCase.Bool) {
        output.WriteRawTag(40);
        output.WriteBool(Bool);
      }
      if (valueCase_ == ValueOneofCase.Float) {
        output.WriteRawTag(53);
        output.WriteFloat(Float);
      }
      if (valueCase_ == ValueOneofCase.Double) {
        output.WriteRawTag(57);
        output.WriteDouble(Double);
      }
      if (valueCase_ == ValueOneofCase.String) {
        output.WriteRawTag(66);
        output.WriteString(String);
      }
      if (valueCase_ == ValueOneofCase.Decimal) {
        output.WriteRawTag(74);
        output.WriteString(Decimal);
      }
      if (valueCase_ == ValueOneofCase.Bytes) {
        output.WriteRawTag(82);
        output.WriteBytes(Bytes);
      }
      if (valueCase_ == ValueOneofCase.Guid) {
        output.WriteRawTag(90);
        output.WriteBytes(Guid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (valueCase_ == ValueOneofCase.Fixed32) {
        size += 1 + 4;
      }
      if (valueCase_ == ValueOneofCase.SFixed32) {
        size += 1 + 4;
      }
      if (valueCase_ == ValueOneofCase.Fixed64) {
        size += 1 + 8;
      }
      if (valueCase_ == ValueOneofCase.SFixed64) {
        size += 1 + 8;
      }
      if (valueCase_ == ValueOneofCase.Bool) {
        size += 1 + 1;
      }
      if (valueCase_ == ValueOneofCase.Float) {
        size += 1 + 4;
      }
      if (valueCase_ == ValueOneofCase.Double) {
        size += 1 + 8;
      }
      if (valueCase_ == ValueOneofCase.String) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(String);
      }
      if (valueCase_ == ValueOneofCase.Decimal) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Decimal);
      }
      if (valueCase_ == ValueOneofCase.Bytes) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Bytes);
      }
      if (valueCase_ == ValueOneofCase.Guid) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Guid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VariantParam other) {
      if (other == null) {
        return;
      }
      switch (other.ValueCase) {
        case ValueOneofCase.Fixed32:
          Fixed32 = other.Fixed32;
          break;
        case ValueOneofCase.SFixed32:
          SFixed32 = other.SFixed32;
          break;
        case ValueOneofCase.Fixed64:
          Fixed64 = other.Fixed64;
          break;
        case ValueOneofCase.SFixed64:
          SFixed64 = other.SFixed64;
          break;
        case ValueOneofCase.Bool:
          Bool = other.Bool;
          break;
        case ValueOneofCase.Float:
          Float = other.Float;
          break;
        case ValueOneofCase.Double:
          Double = other.Double;
          break;
        case ValueOneofCase.String:
          String = other.String;
          break;
        case ValueOneofCase.Decimal:
          Decimal = other.Decimal;
          break;
        case ValueOneofCase.Bytes:
          Bytes = other.Bytes;
          break;
        case ValueOneofCase.Guid:
          Guid = other.Guid;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Fixed32 = input.ReadFixed32();
            break;
          }
          case 21: {
            SFixed32 = input.ReadSFixed32();
            break;
          }
          case 25: {
            Fixed64 = input.ReadFixed64();
            break;
          }
          case 33: {
            SFixed64 = input.ReadSFixed64();
            break;
          }
          case 40: {
            Bool = input.ReadBool();
            break;
          }
          case 53: {
            Float = input.ReadFloat();
            break;
          }
          case 57: {
            Double = input.ReadDouble();
            break;
          }
          case 66: {
            String = input.ReadString();
            break;
          }
          case 74: {
            Decimal = input.ReadString();
            break;
          }
          case 82: {
            Bytes = input.ReadBytes();
            break;
          }
          case 90: {
            Guid = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RpcInvoke : pb::IMessage<RpcInvoke> {
    private static readonly pb::MessageParser<RpcInvoke> _parser = new pb::MessageParser<RpcInvoke>(() => new RpcInvoke());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RpcInvoke> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RPC.RPCReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcInvoke() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcInvoke(RpcInvoke other) : this() {
      objectID_ = other.objectID_;
      interfaceID_ = other.interfaceID_;
      callID_ = other.callID_;
      dispID_ = other.dispID_;
      wFlags_ = other.wFlags_;
      params_ = other.params_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcInvoke Clone() {
      return new RpcInvoke(this);
    }

    /// <summary>Field number for the "ObjectID" field.</summary>
    public const int ObjectIDFieldNumber = 1;
    private int objectID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ObjectID {
      get { return objectID_; }
      set {
        objectID_ = value;
      }
    }

    /// <summary>Field number for the "InterfaceID" field.</summary>
    public const int InterfaceIDFieldNumber = 2;
    private uint interfaceID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InterfaceID {
      get { return interfaceID_; }
      set {
        interfaceID_ = value;
      }
    }

    /// <summary>Field number for the "CallID" field.</summary>
    public const int CallIDFieldNumber = 3;
    private int callID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CallID {
      get { return callID_; }
      set {
        callID_ = value;
      }
    }

    /// <summary>Field number for the "DispID" field.</summary>
    public const int DispIDFieldNumber = 4;
    private int dispID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DispID {
      get { return dispID_; }
      set {
        dispID_ = value;
      }
    }

    /// <summary>Field number for the "wFlags" field.</summary>
    public const int WFlagsFieldNumber = 5;
    private int wFlags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WFlags {
      get { return wFlags_; }
      set {
        wFlags_ = value;
      }
    }

    /// <summary>Field number for the "Params" field.</summary>
    public const int ParamsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::RPC.VariantParam> _repeated_params_codec
        = pb::FieldCodec.ForMessage(50, global::RPC.VariantParam.Parser);
    private readonly pbc::RepeatedField<global::RPC.VariantParam> params_ = new pbc::RepeatedField<global::RPC.VariantParam>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RPC.VariantParam> Params {
      get { return params_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RpcInvoke);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RpcInvoke other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ObjectID != other.ObjectID) return false;
      if (InterfaceID != other.InterfaceID) return false;
      if (CallID != other.CallID) return false;
      if (DispID != other.DispID) return false;
      if (WFlags != other.WFlags) return false;
      if(!params_.Equals(other.params_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ObjectID != 0) hash ^= ObjectID.GetHashCode();
      if (InterfaceID != 0) hash ^= InterfaceID.GetHashCode();
      if (CallID != 0) hash ^= CallID.GetHashCode();
      if (DispID != 0) hash ^= DispID.GetHashCode();
      if (WFlags != 0) hash ^= WFlags.GetHashCode();
      hash ^= params_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ObjectID != 0) {
        output.WriteRawTag(13);
        output.WriteSFixed32(ObjectID);
      }
      if (InterfaceID != 0) {
        output.WriteRawTag(21);
        output.WriteFixed32(InterfaceID);
      }
      if (CallID != 0) {
        output.WriteRawTag(29);
        output.WriteSFixed32(CallID);
      }
      if (DispID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DispID);
      }
      if (WFlags != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(WFlags);
      }
      params_.WriteTo(output, _repeated_params_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ObjectID != 0) {
        size += 1 + 4;
      }
      if (InterfaceID != 0) {
        size += 1 + 4;
      }
      if (CallID != 0) {
        size += 1 + 4;
      }
      if (DispID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DispID);
      }
      if (WFlags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WFlags);
      }
      size += params_.CalculateSize(_repeated_params_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RpcInvoke other) {
      if (other == null) {
        return;
      }
      if (other.ObjectID != 0) {
        ObjectID = other.ObjectID;
      }
      if (other.InterfaceID != 0) {
        InterfaceID = other.InterfaceID;
      }
      if (other.CallID != 0) {
        CallID = other.CallID;
      }
      if (other.DispID != 0) {
        DispID = other.DispID;
      }
      if (other.WFlags != 0) {
        WFlags = other.WFlags;
      }
      params_.Add(other.params_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            ObjectID = input.ReadSFixed32();
            break;
          }
          case 21: {
            InterfaceID = input.ReadFixed32();
            break;
          }
          case 29: {
            CallID = input.ReadSFixed32();
            break;
          }
          case 32: {
            DispID = input.ReadInt32();
            break;
          }
          case 40: {
            WFlags = input.ReadInt32();
            break;
          }
          case 50: {
            params_.AddEntriesFrom(input, _repeated_params_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RpcReturn : pb::IMessage<RpcReturn> {
    private static readonly pb::MessageParser<RpcReturn> _parser = new pb::MessageParser<RpcReturn>(() => new RpcReturn());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RpcReturn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RPC.RPCReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcReturn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcReturn(RpcReturn other) : this() {
      callID_ = other.callID_;
      hResult_ = other.hResult_;
      refOutParams_ = other.refOutParams_.Clone();
      Exception = other.exception_ != null ? other.Exception.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcReturn Clone() {
      return new RpcReturn(this);
    }

    /// <summary>Field number for the "CallID" field.</summary>
    public const int CallIDFieldNumber = 1;
    private int callID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CallID {
      get { return callID_; }
      set {
        callID_ = value;
      }
    }

    /// <summary>Field number for the "HResult" field.</summary>
    public const int HResultFieldNumber = 2;
    private int hResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HResult {
      get { return hResult_; }
      set {
        hResult_ = value;
      }
    }

    /// <summary>Field number for the "Ref_Out_Params" field.</summary>
    public const int RefOutParamsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::RPC.VariantParam> _repeated_refOutParams_codec
        = pb::FieldCodec.ForMessage(26, global::RPC.VariantParam.Parser);
    private readonly pbc::RepeatedField<global::RPC.VariantParam> refOutParams_ = new pbc::RepeatedField<global::RPC.VariantParam>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RPC.VariantParam> RefOutParams {
      get { return refOutParams_; }
    }

    /// <summary>Field number for the "Exception" field.</summary>
    public const int ExceptionFieldNumber = 4;
    private global::RPC.RpcReturn.Types.ExceptionInfo exception_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RPC.RpcReturn.Types.ExceptionInfo Exception {
      get { return exception_; }
      set {
        exception_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RpcReturn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RpcReturn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CallID != other.CallID) return false;
      if (HResult != other.HResult) return false;
      if(!refOutParams_.Equals(other.refOutParams_)) return false;
      if (!object.Equals(Exception, other.Exception)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CallID != 0) hash ^= CallID.GetHashCode();
      if (HResult != 0) hash ^= HResult.GetHashCode();
      hash ^= refOutParams_.GetHashCode();
      if (exception_ != null) hash ^= Exception.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CallID != 0) {
        output.WriteRawTag(13);
        output.WriteSFixed32(CallID);
      }
      if (HResult != 0) {
        output.WriteRawTag(21);
        output.WriteSFixed32(HResult);
      }
      refOutParams_.WriteTo(output, _repeated_refOutParams_codec);
      if (exception_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Exception);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CallID != 0) {
        size += 1 + 4;
      }
      if (HResult != 0) {
        size += 1 + 4;
      }
      size += refOutParams_.CalculateSize(_repeated_refOutParams_codec);
      if (exception_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Exception);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RpcReturn other) {
      if (other == null) {
        return;
      }
      if (other.CallID != 0) {
        CallID = other.CallID;
      }
      if (other.HResult != 0) {
        HResult = other.HResult;
      }
      refOutParams_.Add(other.refOutParams_);
      if (other.exception_ != null) {
        if (exception_ == null) {
          exception_ = new global::RPC.RpcReturn.Types.ExceptionInfo();
        }
        Exception.MergeFrom(other.Exception);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            CallID = input.ReadSFixed32();
            break;
          }
          case 21: {
            HResult = input.ReadSFixed32();
            break;
          }
          case 26: {
            refOutParams_.AddEntriesFrom(input, _repeated_refOutParams_codec);
            break;
          }
          case 34: {
            if (exception_ == null) {
              exception_ = new global::RPC.RpcReturn.Types.ExceptionInfo();
            }
            input.ReadMessage(exception_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RpcReturn message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class ExceptionInfo : pb::IMessage<ExceptionInfo> {
        private static readonly pb::MessageParser<ExceptionInfo> _parser = new pb::MessageParser<ExceptionInfo>(() => new ExceptionInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ExceptionInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::RPC.RpcReturn.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ExceptionInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ExceptionInfo(ExceptionInfo other) : this() {
          description_ = other.description_;
          scode_ = other.scode_;
          wCode_ = other.wCode_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ExceptionInfo Clone() {
          return new ExceptionInfo(this);
        }

        /// <summary>Field number for the "Description" field.</summary>
        public const int DescriptionFieldNumber = 1;
        private string description_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Description {
          get { return description_; }
          set {
            description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "scode" field.</summary>
        public const int ScodeFieldNumber = 2;
        private int scode_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Scode {
          get { return scode_; }
          set {
            scode_ = value;
          }
        }

        /// <summary>Field number for the "wCode" field.</summary>
        public const int WCodeFieldNumber = 3;
        private int wCode_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int WCode {
          get { return wCode_; }
          set {
            wCode_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ExceptionInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ExceptionInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Description != other.Description) return false;
          if (Scode != other.Scode) return false;
          if (WCode != other.WCode) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Description.Length != 0) hash ^= Description.GetHashCode();
          if (Scode != 0) hash ^= Scode.GetHashCode();
          if (WCode != 0) hash ^= WCode.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Description.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Description);
          }
          if (Scode != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Scode);
          }
          if (WCode != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(WCode);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Description.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
          }
          if (Scode != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Scode);
          }
          if (WCode != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(WCode);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ExceptionInfo other) {
          if (other == null) {
            return;
          }
          if (other.Description.Length != 0) {
            Description = other.Description;
          }
          if (other.Scode != 0) {
            Scode = other.Scode;
          }
          if (other.WCode != 0) {
            WCode = other.WCode;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Description = input.ReadString();
                break;
              }
              case 16: {
                Scode = input.ReadInt32();
                break;
              }
              case 24: {
                WCode = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
